{
	"name": "AUM",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "InvestorBalances",
						"type": "DatasetReference"
					},
					"name": "InvestorBalances"
				},
				{
					"dataset": {
						"referenceName": "DAAccountBalances",
						"type": "DatasetReference"
					},
					"name": "DAAccountBalances"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "csv_VW_Areas",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as long,",
				"          InvestorId as long,",
				"          FundId as integer,",
				"          CurrentNN as decimal(22,6),",
				"          CurrentSP as decimal(22,6)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> InvestorBalances",
				"source(output(",
				"          Id as integer,",
				"          DistributionAgentAccountId as integer,",
				"          FundId as integer,",
				"          QuantityNN as decimal(22,6),",
				"          QuantitySIP as decimal(22,6),",
				"          CreationTime as timestamp,",
				"          LastModificationTime as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DAAccountBalances",
				"DAAccountBalances select(mapColumn(",
				"          FundId,",
				"          QuantityNN,",
				"          QuantitySIP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"InvestorBalances select(mapColumn(",
				"          InvestorId,",
				"          FundId,",
				"          CurrentNN,",
				"          CurrentSP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4, select3 join(select4@FundId == select3@FundId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as string,",
				"          OrganizationId as string,",
				"          Name as string,",
				"          CreationTime as string,",
				"          LastModificationTime as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}